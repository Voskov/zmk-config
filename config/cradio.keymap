/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

#define HRML(k1,k2,k3,k4) &lht LGUI k1   &lht LALT k2   &lht LSHFT k3   &lht LCTRL k4
#define HRMR(k1,k2,k3,k4) &rht RCTRL k1  &rht RSHFT k2  &rht RALT k3    &rht RGUI k4
#define HT(k1,k2,k3,k4) &ht LG(V) k1  &ht LG(C) k2  &ht LG(X) k3  &ht LG(Z) k4

/ { 

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        
         combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };
        
            combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };
        
                    combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };
        
                           combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };
        
        
           combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
        

        
    };

        keymap {
                compatible = "zmk,keymap";
                
       	default_layer {
		bindings = <
		&kp B   &kp W   &kp E   &kp R   &kp T 				&kp Y   &kp U   &kp I       &kp O   &kp N 
		HRML(A,     S,      D,      F)  &kp G               &kp H   HRMR(J,     K,          L,    SQT)
		&kp Z   &kp X   &kp C   &kp V   &kp Q				&kp P   &kp M   &kp CMMA    &kp DOT &mt LSFT RET
          				    &lt 3 TAB   &lt 2 SPACE			&lt 2 SPACE     &lt 3 RET 
		>;
		};

       	CMK_layer {
		bindings = <
		&kp Q   &kp W   &kp F   &kp P   &kp G 				&kp J   &kp L   &kp U       &kp Y   &kp K
		HRML(A,     R,      S,      T)  &kp D               &kp H   HRMR(N,     E,          I,         O)
		&kp Z   &kp X   &kp C   &kp V   &kp B				&kp SEMICOLON   &kp M   &kp CMMA    &kp DOT &mt LSFT RET
          				    &lt 3 TAB   &lt 2 SPACE			&lt 2 SPACE     &lt 3 RET 
		>;
		};

       	left_layer {
		bindings = <
        &kp RPAR    &kp EXCL    &kp AT      &kp LBRC    &kp RBRC        &kp PG_UP   &kp HOME    &kp UP      &kp END     &kp MINUS
        &kp ESC     &kp HASH    &kp ASTRK   &kp LBKT    &kp RBKT        &kp PG_DN   &kp LEFT    &kp DOWN    &kp RIGHT   &kp SQT
        &kp GRAVE   &kp DLLR    &kp AMPS    &kp LPAR    &kp TAB         &kp BSPC    &kp EQUAL   &kp DEL     &kp INS     &kp RET
					                        &mo 1       &kp LGUI        &kp RGUI    &mo 2 
		>;
		};
		
		right_layer {
		bindings = <
		&kp BANG  &kp ATSN &kp HASH  &kp DLLR  &kp PRCT    			&kp CRRT  &kp AMPS &kp KMLT &kp LPRN &kp RPRN 
		&kp HASH  &kp QMARK  &kp FSLH  &kp COLN  &kp SCLN 			&kp MINUS &kp KP_EQUAL  &kp LBRC  &kp RBRC   &kp BKSP
		&kp LSFT  &kp KPLS &kp LBKT &kp RBKT   &kp BSLH    			&kp UNDER &kp LEFT &kp DOWN &kp UP  &kp RIGHT
					  &mo 3 &kp LCTL  				&kp SPC  &mo 2 
		>;
		};	
		
		tri_layer {
		bindings = <
		&kp NUM_1  &kp NUM_2    &kp NUM_3    &kp NUM_4    &kp NUM_5 			&trans &trans   &trans   &trans  &trans
		&kp F1 &kp F2 &kp F3 &kp F4 &kp F5  						&trans &kp PG_UP  &kp K_VOL_UP &kp K_MUTE &trans 
		&bt BT_CLR  &bt BT_NXT &bt BT_PRV &kp F6 &kp F7   				&trans &kp PG_DN  &kp K_VOL_DN  &trans &trans   
					 &trans &trans  					&trans &trans 
		>;
		};	
        
	};
};
